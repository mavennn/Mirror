'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.waitForReact = exports.ReactSelector = undefined;

var _testcafe = require('testcafe');

var ReactSelector = exports.ReactSelector = (0, _testcafe.Selector)(function (selector) {
    var getRootElsReact15 = /*global document*/

    /*eslint-disable no-unused-vars*/
    function getRootElsReact15() {
        /*eslint-enable no-unused-vars*/

        var ELEMENT_NODE = 1;

        function getRootComponent(el) {
            if (!el || el.nodeType !== ELEMENT_NODE) return null;

            for (var _i2 = 0, _Object$keys2 = Object.keys(el), _length2 = _Object$keys2.length; _i2 < _length2; _i2++) {
                var prop = _Object$keys2[_i2];
                if (!/^__reactInternalInstance/.test(prop)) continue;

                return el[prop]._hostContainerInfo._topLevelWrapper._renderedComponent;
            }
        }

        var rootEls = [].slice.call(document.querySelectorAll('[data-reactroot]'));
        var checkRootEls = rootEls.length && Object.keys(rootEls[0]).some(function (prop) {
            var rootEl = rootEls[0];

            //NOTE: server rendering in React 16 also adds data-reactroot attribute, we check existing the
            //alternate field because it doesn't exists in React 15.
            return (/^__reactInternalInstance/.test(prop) && !rootEl[prop].hasOwnProperty('alternate')
            );
        });

        return (checkRootEls && rootEls || []).map(getRootComponent);
    };

    var getRootElsReact16 = /*global document*/

    /*eslint-disable no-unused-vars*/
    function getRootElsReact16(el) {
        el = el || document.body;

        if (el._reactRootContainer) {
            var rootContainer = el._reactRootContainer._internalRoot || el._reactRootContainer;

            return rootContainer.current.child;
        }

        var children = el.children;
        var rootEls = [];

        for (var index = 0; index < children.length; ++index) {
            var child = children[index];

            rootEls = rootEls.concat(getRootElsReact16(child));
        }

        return rootEls;
    };

    var selectorReact15 = /*global window rootEls defineSelectorProperty visitedRootEls checkRootNodeVisited*/

    /*eslint-disable no-unused-vars*/
    function react15elector(selector) {
        var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootEls;

        var ELEMENT_NODE = 1;
        var COMMENT_NODE = 8;

        window['%testCafeReactFoundComponents%'] = [];

        /*eslint-enable no-unused-vars*/
        function getName(component) {
            var currentElement = component._currentElement;

            var name = component.getName ? component.getName() : component._tag;

            //NOTE: getName() returns null in IE, also it try to get function name for a stateless component
            if (name === null && currentElement && typeof currentElement === 'object') {
                var matches = currentElement.type.toString().match(/^function\s*([^\s(]+)/);

                if (matches) name = matches[1];
            }

            return name;
        }

        function getRootComponent(el) {
            if (!el || el.nodeType !== ELEMENT_NODE) return null;

            for (var _i4 = 0, _Object$keys4 = Object.keys(el), _length4 = _Object$keys4.length; _i4 < _length4; _i4++) {
                var prop = _Object$keys4[_i4];
                if (!/^__reactInternalInstance/.test(prop)) continue;

                return el[prop]._hostContainerInfo._topLevelWrapper._renderedComponent;
            }
        }

        if (!window['%testCafeReactSelectorUtils%']) window['%testCafeReactSelectorUtils%'] = { getName, getRootComponent };

        function getRenderedChildren(component) {
            var hostNode = component.getHostNode();
            var hostNodeType = hostNode.nodeType;
            var container = component._instance && component._instance.container;
            var isRootComponent = hostNode.hasAttribute && hostNode.hasAttribute('data-reactroot');

            //NOTE: prevent the repeating visiting of reactRoot Component inside of portal
            if (component._renderedComponent && isRootComponent) {
                if (checkRootNodeVisited(component._renderedComponent)) return [];

                visitedRootEls.push(component._renderedComponent);
            }

            //NOTE: Detect if it's a portal component
            if (hostNodeType === COMMENT_NODE && container) {
                var domNode = container.querySelector('[data-reactroot]');

                return { _: getRootComponent(domNode) };
            }

            return component._renderedChildren || component._renderedComponent && { _: component._renderedComponent } || {};
        }

        function parseSelectorElements(compositeSelector) {
            return compositeSelector.split(' ').filter(function (el) {
                return !!el;
            }).map(function (el) {
                return el.trim();
            });
        }

        function reactSelect(compositeSelector) {
            var foundComponents = [];

            function findDOMNode(rootEl) {
                if (typeof compositeSelector !== 'string') throw new Error(`Selector option is expected to be a string, but it was ${typeof compositeSelector}.`);

                var selectorIndex = 0;
                var selectorElms = parseSelectorElements(compositeSelector);

                if (selectorElms.length) defineSelectorProperty(selectorElms[selectorElms.length - 1]);

                function walk(reactComponent, cb) {
                    if (!reactComponent) return;

                    var componentWasFound = cb(reactComponent);

                    //NOTE: we're looking for only between the children of component
                    if (selectorIndex > 0 && selectorIndex < selectorElms.length && !componentWasFound) {
                        var isTag = selectorElms[selectorIndex].toLowerCase() === selectorElms[selectorIndex];
                        var parent = reactComponent._hostParent;

                        if (isTag && parent) {
                            var renderedChildren = parent._renderedChildren;
                            var renderedChildrenKeys = Object.keys(renderedChildren);

                            var currentElementId = renderedChildrenKeys.filter(function (key) {
                                var renderedComponent = renderedChildren[key]._renderedComponent;

                                return renderedComponent && renderedComponent._domID === reactComponent._domID;
                            })[0];

                            if (!renderedChildren[currentElementId]) return;
                        }
                    }

                    var currSelectorIndex = selectorIndex;

                    renderedChildren = getRenderedChildren(reactComponent);

                    Object.keys(renderedChildren).forEach(function (key) {
                        walk(renderedChildren[key], cb);

                        selectorIndex = currSelectorIndex;
                    });
                }

                return walk(rootEl, function (reactComponent) {
                    var componentName = getName(reactComponent);

                    if (!componentName) return false;

                    var domNode = reactComponent.getHostNode();

                    if (selectorElms[selectorIndex] !== componentName) return false;

                    if (selectorIndex === selectorElms.length - 1) {
                        if (foundComponents.indexOf(domNode) === -1) foundComponents.push(domNode);

                        window['%testCafeReactFoundComponents%'].push({ node: domNode, component: reactComponent });
                    }

                    selectorIndex++;

                    return true;
                });
            }

            [].forEach.call(parents, findDOMNode);

            return foundComponents;
        }

        return reactSelect(selector);
    };

    var selectorReact16 = /*global window document Node rootEls defineSelectorProperty visitedRootEls checkRootNodeVisited*/

    /*eslint-disable no-unused-vars*/
    function react16Selector(selector) {
        var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootEls;

        window['%testCafeReactFoundComponents%'] = [];

        /*eslint-enable no-unused-vars*/
        function createAnnotationForEmptyComponent(component) {
            var comment = document.createComment('testcafe-react-selectors: the requested component didn\'t render any DOM elements');

            comment.__$$reactInstance = component;

            if (!window['%testCafeReactEmptyComponent%']) window['%testCafeReactEmptyComponent%'] = [];

            window['%testCafeReactEmptyComponent%'].push(comment);

            return comment;
        }

        function getName(component) {
            if (!component.type && !component.memoizedState) return null;

            var currentElement = component.type ? component : component.memoizedState.element;

            //NOTE: tag
            if (typeof component.type === 'string') return component.type;
            if (component.type.displayName || component.type.name) return component.type.displayName || component.type.name;

            var matches = currentElement.type.toString().match(/^function\s*([^\s(]+)/);

            if (matches) return matches[1];

            return null;
        }

        function getContainer(component) {
            var node = component;

            while (!(node.stateNode instanceof Node)) {
                if (node.child) node = node.child;else break;
            }

            if (!(node.stateNode instanceof Node)) return null;

            return node.stateNode;
        }

        function getRenderedChildren(component) {
            var isRootComponent = rootEls.indexOf(component) > -1;

            //Nested root element
            if (isRootComponent) {
                if (checkRootNodeVisited(component)) return [];

                visitedRootEls.push(component);
            }

            //Portal component
            if (!component.child) {
                var portalRoot = component.stateNode && component.stateNode.container && component.stateNode.container._reactRootContainer;

                var rootContainer = portalRoot && (portalRoot._internalRoot || portalRoot);

                if (rootContainer) component = rootContainer.current;
            }

            if (!component.child) return [];

            var currentChild = component.child;

            if (typeof component.type !== 'string') currentChild = component.child;

            var children = [currentChild];

            while (currentChild.sibling) {
                children.push(currentChild.sibling);

                currentChild = currentChild.sibling;
            }

            return children;
        }

        function parseSelectorElements(compositeSelector) {
            return compositeSelector.split(' ').filter(function (el) {
                return !!el;
            }).map(function (el) {
                return el.trim();
            });
        }

        function reactSelect(compositeSelector) {
            var foundComponents = [];

            function findDOMNode(rootComponent) {
                if (typeof compositeSelector !== 'string') throw new Error(`Selector option is expected to be a string, but it was ${typeof compositeSelector}.`);

                var selectorIndex = 0;
                var selectorElms = parseSelectorElements(compositeSelector);

                if (selectorElms.length) defineSelectorProperty(selectorElms[selectorElms.length - 1]);

                function walk(reactComponent, cb) {
                    if (!reactComponent) return;

                    var componentWasFound = cb(reactComponent);
                    var currSelectorIndex = selectorIndex;

                    var isNotFirstSelectorPart = selectorIndex > 0 && selectorIndex < selectorElms.length;

                    if (isNotFirstSelectorPart && !componentWasFound) {
                        var isTag = selectorElms[selectorIndex].toLowerCase() === selectorElms[selectorIndex];

                        //NOTE: we're looking for only between the children of component
                        if (isTag && getName(reactComponent.return) !== selectorElms[selectorIndex - 1]) return;
                    }

                    var renderedChildren = getRenderedChildren(reactComponent);

                    Object.keys(renderedChildren).forEach(function (key) {
                        walk(renderedChildren[key], cb);

                        selectorIndex = currSelectorIndex;
                    });
                }

                return walk(rootComponent, function (reactComponent) {
                    var componentName = getName(reactComponent);

                    if (!componentName) return false;

                    var domNode = getContainer(reactComponent);

                    if (selectorElms[selectorIndex] !== componentName) return false;

                    if (selectorIndex === selectorElms.length - 1) {
                        if (foundComponents.indexOf(domNode) === -1) foundComponents.push(domNode || createAnnotationForEmptyComponent(reactComponent));

                        window['%testCafeReactFoundComponents%'].push({ node: domNode, component: reactComponent });
                    }

                    selectorIndex++;

                    return true;
                });
            }

            [].forEach.call(parents, findDOMNode);

            return foundComponents;
        }

        return reactSelect(selector);
    };

    var visitedRootEls = [];
    var rootEls = null;

    function checkRootNodeVisited(component) {
        return visitedRootEls.indexOf(component) > -1;
    }

    function defineSelectorProperty(value) {
        if (window['%testCafeReactSelector%']) delete window['%testCafeReactSelector%'];

        Object.defineProperty(window, '%testCafeReactSelector%', {
            enumerable: false,
            configurable: true,
            writable: false,
            value: value
        });
    }

    rootEls = getRootElsReact15();

    var foundDOMNodes = void 0;

    if (rootEls.length) {
        window['%testCafeReactVersion%'] = 15;
        window['$testCafeReactSelector'] = selectorReact15;

        foundDOMNodes = selectorReact15(selector);
    }

    rootEls = getRootElsReact16();

    if (rootEls.length) {
        window['%testCafeReactVersion%'] = 16;
        window['$testCafeReactSelector'] = selectorReact16;
        window['$testCafeReact16Roots'] = rootEls;

        foundDOMNodes = selectorReact16(selector);
    }

    visitedRootEls = [];

    if (foundDOMNodes) return foundDOMNodes;

    throw new Error("React component tree is not loaded yet or the current React version is not supported. This module supports React version 15.x and newer. To wait until the React's component tree is loaded, add the `waitForReact` method to fixture's `beforeEach` hook.");
}).addCustomMethods({
    getReact: function getReact(node, fn) {
        var reactVersion = window['%testCafeReactVersion%'];
        var react15Utils = /*global window*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;
            var utils = window['%testCafeReactSelectorUtils%'];

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentInstance(component) {
                var parent = component._hostParent || component;
                var renderedChildren = parent._renderedChildren || { _: component._renderedComponent } || {};
                var renderedChildrenKeys = Object.keys(renderedChildren);
                var componentName = window['%testCafeReactSelector%'];

                for (var index = 0; index < renderedChildrenKeys.length; ++index) {
                    var key = renderedChildrenKeys[index];
                    var renderedComponent = renderedChildren[key];
                    var componentInstance = null;

                    while (renderedComponent) {
                        if (componentName === utils.getName(renderedComponent)) componentInstance = renderedComponent._instance || renderedComponent._currentElement;

                        if (renderedComponent._domID === component._domID) return componentInstance;

                        renderedComponent = renderedComponent._renderedComponent;
                    }
                }

                return null;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var isRootNode = el.hasAttribute && el.hasAttribute('data-reactroot');
                var componentName = window['%testCafeReactSelector%'];

                if (isRootNode) {
                    var rootComponent = utils.getRootComponent(el);

                    //NOTE: check if it's not a portal component
                    if (utils.getName(rootComponent) === componentName) return rootComponent._instance;

                    return getComponentInstance(rootComponent);
                }

                for (var _i6 = 0, _Object$keys6 = Object.keys(el), _length6 = _Object$keys6.length; _i6 < _length6; _i6++) {
                    var prop = _Object$keys6[_i6];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    return getComponentInstance(el[prop]);
                }
            }

            function getComponentKey(component) {
                var currentElement = component._reactInternalInstance ? component._reactInternalInstance._currentElement : component;

                return currentElement.key;
            }

            /*eslint-disable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-enable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: getComponentKey(componentInstance)
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: getComponentKey(componentInstance)
                };
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function scanDOMNodeForReactComponent(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;

                for (var _i8 = 0, _Object$keys8 = Object.keys(el), _length8 = _Object$keys8.length; _i8 < _length8; _i8++) {
                    var prop = _Object$keys8[_i8];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    component = el[prop];

                    break;
                }

                if (!component) return null;

                var parent = component._hostParent;

                if (!parent) return component;

                var renderedChildren = parent._renderedChildren;
                var renderedChildrenKeys = Object.keys(renderedChildren);

                var currentElementId = renderedChildrenKeys.filter(function (key) {
                    var renderedComponent = renderedChildren[key];

                    return renderedComponent && renderedComponent.getHostNode() === el;
                })[0];

                return renderedChildren[currentElementId];
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var react16Utils = /*global window Node*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;
                var emptyComponentFound = window['%testCafeReactEmptyComponent%'] && window['%testCafeReactEmptyComponent%'].length;

                if (emptyComponentFound && el.nodeType === COMMENT_NODE) component = window['%testCafeReactEmptyComponent%'].shift().__$$reactInstance;else if (window['%testCafeReactFoundComponents%'].length) component = window['%testCafeReactFoundComponents%'].filter(function (desc) {
                    return desc.node === el;
                })[0].component;

                var props = component.stateNode && component.stateNode.props || component.memoizedProps;
                var state = component.stateNode && component.stateNode.state || component.memoizedState;
                var key = component.key;

                return { props, state, key };
            }

            /*eslint-enable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-disable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];
                delete window['%testCafeReactEmptyComponent%'];
                delete window['%testCafeReactFoundComponents%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: componentInstance.key
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: componentInstance.key
                };
            }

            function scanDOMNodeForReactInstance(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                if (el.nodeType === COMMENT_NODE) return el.__$$reactInstance.return.child;

                for (var _i10 = 0, _Object$keys10 = Object.keys(el), _length10 = _Object$keys10.length; _i10 < _length10; _i10++) {
                    var prop = _Object$keys10[_i10];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    var nestedComponent = el[prop];

                    if (typeof nestedComponent.type !== 'string') return nestedComponent;

                    var parentComponent = nestedComponent;

                    do {
                        nestedComponent = parentComponent;
                        parentComponent = nestedComponent.return;
                    } while (parentComponent && parentComponent.type && !(parentComponent.stateNode instanceof Node));

                    return nestedComponent;
                }
            }

            function getRenderedComponentVersion(component, rootInstances) {
                if (!component.alternate) return component;

                var component1 = component;
                var component2 = component.alternate;

                while (component1.return) {
                    component1 = component1.return;
                }while (component2.return) {
                    component2 = component2.return;
                }if (rootInstances.indexOf(component1) > -1) return component;

                return component.alternate;
            }

            function scanDOMNodeForReactComponent(domNode) {
                var rootInstances = window['$testCafeReact16Roots'].map(function (rootEl) {
                    return rootEl.return || rootEl;
                });
                var reactInstance = scanDOMNodeForReactInstance(domNode);

                return getRenderedComponentVersion(reactInstance, rootInstances);
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function getComponentKey(instance) {
                return instance.key;
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        delete window['%testCafeReactVersion%'];

        if (reactVersion === 15) return react15Utils.getReact(node, fn);
        if (reactVersion === 16) return react16Utils.getReact(node, fn);
    }
}).addCustomMethods({
    withProps: function withProps(nodes) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        window['%testCafeReactFoundComponents%'] = window['%testCafeReactFoundComponents%'].filter(function (component) {
            return nodes.indexOf(component.node) > -1;
        });

        function isObject(value) {
            return typeof value === 'object' && value !== null && !Array.isArray(value);
        }

        function isEql(value1, value2) {
            if (typeof value1 !== 'object' || value1 === null || typeof value2 !== 'object' || value2 === null) return value1 === value2;

            if (Object.keys(value1).length !== Object.keys(value2).length) return false;

            for (var prop in value1) {
                if (!value2.hasOwnProperty(prop)) return false;
                if (!isEql(value1[prop], value2[prop])) return false;
            }

            return true;
        }

        function isInclude(value1, value2) {
            if (typeof value1 !== 'object' || value1 === null || typeof value2 !== 'object' || value2 === null) return value1 === value2;

            for (var prop in value2) {
                if (!value1.hasOwnProperty(prop)) return false;
                if (!isInclude(value1[prop], value2[prop])) return false;
            }

            return true;
        }

        function matchProps(value1, value2, exactObjectMatch) {
            if (exactObjectMatch) return isEql(value1, value2);

            return isInclude(value1, value2);
        }

        function componentHasProps(_ref, filterProps, exactObjectMatch) {
            var props = _ref.props;

            for (var _i12 = 0, _Object$keys12 = Object.keys(filterProps), _length12 = _Object$keys12.length; _i12 < _length12; _i12++) {
                var prop = _Object$keys12[_i12];
                if (!props.hasOwnProperty(prop)) return false;

                if (!matchProps(props[prop], filterProps[prop], exactObjectMatch)) return false;
            }

            return true;
        }

        var reactVersion = window['%testCafeReactVersion%'];
        var react15Utils = /*global window*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;
            var utils = window['%testCafeReactSelectorUtils%'];

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentInstance(component) {
                var parent = component._hostParent || component;
                var renderedChildren = parent._renderedChildren || { _: component._renderedComponent } || {};
                var renderedChildrenKeys = Object.keys(renderedChildren);
                var componentName = window['%testCafeReactSelector%'];

                for (var index = 0; index < renderedChildrenKeys.length; ++index) {
                    var key = renderedChildrenKeys[index];
                    var renderedComponent = renderedChildren[key];
                    var componentInstance = null;

                    while (renderedComponent) {
                        if (componentName === utils.getName(renderedComponent)) componentInstance = renderedComponent._instance || renderedComponent._currentElement;

                        if (renderedComponent._domID === component._domID) return componentInstance;

                        renderedComponent = renderedComponent._renderedComponent;
                    }
                }

                return null;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var isRootNode = el.hasAttribute && el.hasAttribute('data-reactroot');
                var componentName = window['%testCafeReactSelector%'];

                if (isRootNode) {
                    var rootComponent = utils.getRootComponent(el);

                    //NOTE: check if it's not a portal component
                    if (utils.getName(rootComponent) === componentName) return rootComponent._instance;

                    return getComponentInstance(rootComponent);
                }

                for (var _i14 = 0, _Object$keys14 = Object.keys(el), _length14 = _Object$keys14.length; _i14 < _length14; _i14++) {
                    var prop = _Object$keys14[_i14];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    return getComponentInstance(el[prop]);
                }
            }

            function getComponentKey(component) {
                var currentElement = component._reactInternalInstance ? component._reactInternalInstance._currentElement : component;

                return currentElement.key;
            }

            /*eslint-disable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-enable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: getComponentKey(componentInstance)
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: getComponentKey(componentInstance)
                };
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function scanDOMNodeForReactComponent(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;

                for (var _i16 = 0, _Object$keys16 = Object.keys(el), _length16 = _Object$keys16.length; _i16 < _length16; _i16++) {
                    var prop = _Object$keys16[_i16];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    component = el[prop];

                    break;
                }

                if (!component) return null;

                var parent = component._hostParent;

                if (!parent) return component;

                var renderedChildren = parent._renderedChildren;
                var renderedChildrenKeys = Object.keys(renderedChildren);

                var currentElementId = renderedChildrenKeys.filter(function (key) {
                    var renderedComponent = renderedChildren[key];

                    return renderedComponent && renderedComponent.getHostNode() === el;
                })[0];

                return renderedChildren[currentElementId];
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var react16Utils = /*global window Node*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;
                var emptyComponentFound = window['%testCafeReactEmptyComponent%'] && window['%testCafeReactEmptyComponent%'].length;

                if (emptyComponentFound && el.nodeType === COMMENT_NODE) component = window['%testCafeReactEmptyComponent%'].shift().__$$reactInstance;else if (window['%testCafeReactFoundComponents%'].length) component = window['%testCafeReactFoundComponents%'].filter(function (desc) {
                    return desc.node === el;
                })[0].component;

                var props = component.stateNode && component.stateNode.props || component.memoizedProps;
                var state = component.stateNode && component.stateNode.state || component.memoizedState;
                var key = component.key;

                return { props, state, key };
            }

            /*eslint-enable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-disable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];
                delete window['%testCafeReactEmptyComponent%'];
                delete window['%testCafeReactFoundComponents%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: componentInstance.key
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: componentInstance.key
                };
            }

            function scanDOMNodeForReactInstance(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                if (el.nodeType === COMMENT_NODE) return el.__$$reactInstance.return.child;

                for (var _i18 = 0, _Object$keys18 = Object.keys(el), _length18 = _Object$keys18.length; _i18 < _length18; _i18++) {
                    var prop = _Object$keys18[_i18];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    var nestedComponent = el[prop];

                    if (typeof nestedComponent.type !== 'string') return nestedComponent;

                    var parentComponent = nestedComponent;

                    do {
                        nestedComponent = parentComponent;
                        parentComponent = nestedComponent.return;
                    } while (parentComponent && parentComponent.type && !(parentComponent.stateNode instanceof Node));

                    return nestedComponent;
                }
            }

            function getRenderedComponentVersion(component, rootInstances) {
                if (!component.alternate) return component;

                var component1 = component;
                var component2 = component.alternate;

                while (component1.return) {
                    component1 = component1.return;
                }while (component2.return) {
                    component2 = component2.return;
                }if (rootInstances.indexOf(component1) > -1) return component;

                return component.alternate;
            }

            function scanDOMNodeForReactComponent(domNode) {
                var rootInstances = window['$testCafeReact16Roots'].map(function (rootEl) {
                    return rootEl.return || rootEl;
                });
                var reactInstance = scanDOMNodeForReactInstance(domNode);

                return getRenderedComponentVersion(reactInstance, rootInstances);
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function getComponentKey(instance) {
                return instance.key;
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var filterProps = {};
        var options = null;
        var firstArgsIsObject = isObject(args[0]);

        if (args.length === 2 && firstArgsIsObject) options = args[1];else if (args.length > 2) options = args[2];

        if (args.length < 2 && !firstArgsIsObject) throw new Error(`The "props" option value is expected to be a non-null object, but it is ${typeof args[0]}.`);else if (typeof args[0] !== 'string' && !firstArgsIsObject) throw new Error(`The first argument is expected to be a property name string or a "props" non-null object, but it is ${typeof args[0]}.`);

        if (options && typeof options !== 'object' && !Array.isArray(args[0])) throw new Error(`The "options" value is expected to be an object, but it is ${typeof options}.`);

        if (args.length > 1) {
            if (firstArgsIsObject) filterProps = args[0];else filterProps[args[0]] = args[1];
        } else if (args[0]) filterProps = args[0];

        var getComponentForDOMNode = reactVersion === 15 ? react15Utils.getComponentForDOMNode : react16Utils.getComponentForDOMNode;

        var filteredNodes = [];
        var exactObjectMatch = options && options.exactObjectMatch || false;

        var foundInstances = nodes.filter(function (node) {
            var componentInstance = getComponentForDOMNode(node);

            if (componentInstance && componentHasProps(componentInstance, filterProps, exactObjectMatch)) {
                filteredNodes.push(node);

                return true;
            }
        });

        return foundInstances;
    },

    withKey: function withKey(nodes, key) {
        if (key === void 0 || key === null) return [];

        var keyString = key.toString();

        window['%testCafeReactFoundComponents%'] = window['%testCafeReactFoundComponents%'].filter(function (component) {
            return nodes.indexOf(component.node) > -1;
        });

        var reactVersion = window['%testCafeReactVersion%'];
        var react15Utils = /*global window*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;
            var utils = window['%testCafeReactSelectorUtils%'];

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentInstance(component) {
                var parent = component._hostParent || component;
                var renderedChildren = parent._renderedChildren || { _: component._renderedComponent } || {};
                var renderedChildrenKeys = Object.keys(renderedChildren);
                var componentName = window['%testCafeReactSelector%'];

                for (var index = 0; index < renderedChildrenKeys.length; ++index) {
                    var _key2 = renderedChildrenKeys[index];
                    var renderedComponent = renderedChildren[_key2];
                    var componentInstance = null;

                    while (renderedComponent) {
                        if (componentName === utils.getName(renderedComponent)) componentInstance = renderedComponent._instance || renderedComponent._currentElement;

                        if (renderedComponent._domID === component._domID) return componentInstance;

                        renderedComponent = renderedComponent._renderedComponent;
                    }
                }

                return null;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var isRootNode = el.hasAttribute && el.hasAttribute('data-reactroot');
                var componentName = window['%testCafeReactSelector%'];

                if (isRootNode) {
                    var rootComponent = utils.getRootComponent(el);

                    //NOTE: check if it's not a portal component
                    if (utils.getName(rootComponent) === componentName) return rootComponent._instance;

                    return getComponentInstance(rootComponent);
                }

                for (var _i20 = 0, _Object$keys20 = Object.keys(el), _length20 = _Object$keys20.length; _i20 < _length20; _i20++) {
                    var prop = _Object$keys20[_i20];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    return getComponentInstance(el[prop]);
                }
            }

            function getComponentKey(component) {
                var currentElement = component._reactInternalInstance ? component._reactInternalInstance._currentElement : component;

                return currentElement.key;
            }

            /*eslint-disable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-enable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: getComponentKey(componentInstance)
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: getComponentKey(componentInstance)
                };
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function scanDOMNodeForReactComponent(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;

                for (var _i22 = 0, _Object$keys22 = Object.keys(el), _length22 = _Object$keys22.length; _i22 < _length22; _i22++) {
                    var prop = _Object$keys22[_i22];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    component = el[prop];

                    break;
                }

                if (!component) return null;

                var parent = component._hostParent;

                if (!parent) return component;

                var renderedChildren = parent._renderedChildren;
                var renderedChildrenKeys = Object.keys(renderedChildren);

                var currentElementId = renderedChildrenKeys.filter(function (key) {
                    var renderedComponent = renderedChildren[key];

                    return renderedComponent && renderedComponent.getHostNode() === el;
                })[0];

                return renderedChildren[currentElementId];
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var react16Utils = /*global window Node*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;
                var emptyComponentFound = window['%testCafeReactEmptyComponent%'] && window['%testCafeReactEmptyComponent%'].length;

                if (emptyComponentFound && el.nodeType === COMMENT_NODE) component = window['%testCafeReactEmptyComponent%'].shift().__$$reactInstance;else if (window['%testCafeReactFoundComponents%'].length) component = window['%testCafeReactFoundComponents%'].filter(function (desc) {
                    return desc.node === el;
                })[0].component;

                var props = component.stateNode && component.stateNode.props || component.memoizedProps;
                var state = component.stateNode && component.stateNode.state || component.memoizedState;
                var key = component.key;

                return { props, state, key };
            }

            /*eslint-enable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-disable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];
                delete window['%testCafeReactEmptyComponent%'];
                delete window['%testCafeReactFoundComponents%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: componentInstance.key
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: componentInstance.key
                };
            }

            function scanDOMNodeForReactInstance(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                if (el.nodeType === COMMENT_NODE) return el.__$$reactInstance.return.child;

                for (var _i24 = 0, _Object$keys24 = Object.keys(el), _length24 = _Object$keys24.length; _i24 < _length24; _i24++) {
                    var prop = _Object$keys24[_i24];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    var nestedComponent = el[prop];

                    if (typeof nestedComponent.type !== 'string') return nestedComponent;

                    var parentComponent = nestedComponent;

                    do {
                        nestedComponent = parentComponent;
                        parentComponent = nestedComponent.return;
                    } while (parentComponent && parentComponent.type && !(parentComponent.stateNode instanceof Node));

                    return nestedComponent;
                }
            }

            function getRenderedComponentVersion(component, rootInstances) {
                if (!component.alternate) return component;

                var component1 = component;
                var component2 = component.alternate;

                while (component1.return) {
                    component1 = component1.return;
                }while (component2.return) {
                    component2 = component2.return;
                }if (rootInstances.indexOf(component1) > -1) return component;

                return component.alternate;
            }

            function scanDOMNodeForReactComponent(domNode) {
                var rootInstances = window['$testCafeReact16Roots'].map(function (rootEl) {
                    return rootEl.return || rootEl;
                });
                var reactInstance = scanDOMNodeForReactInstance(domNode);

                return getRenderedComponentVersion(reactInstance, rootInstances);
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function getComponentKey(instance) {
                return instance.key;
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var reactUtils = reactVersion === 15 ? react15Utils : react16Utils;

        var getComponentForDOMNode = reactUtils.getComponentForDOMNode;
        var getComponentKey = reactUtils.getComponentKey;

        var filteredNodes = [];

        var foundInstances = nodes.filter(function (node) {
            var componentInstance = getComponentForDOMNode(node);
            var componentKey = getComponentKey(componentInstance);

            if (componentInstance && componentKey === keyString) {
                filteredNodes.push(node);

                return true;
            }
        });

        return foundInstances;
    },

    findReact: function findReact(nodes, selector) {
        var reactVersion = window['%testCafeReactVersion%'];
        var react15Utils = /*global window*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;
            var utils = window['%testCafeReactSelectorUtils%'];

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentInstance(component) {
                var parent = component._hostParent || component;
                var renderedChildren = parent._renderedChildren || { _: component._renderedComponent } || {};
                var renderedChildrenKeys = Object.keys(renderedChildren);
                var componentName = window['%testCafeReactSelector%'];

                for (var index = 0; index < renderedChildrenKeys.length; ++index) {
                    var key = renderedChildrenKeys[index];
                    var renderedComponent = renderedChildren[key];
                    var componentInstance = null;

                    while (renderedComponent) {
                        if (componentName === utils.getName(renderedComponent)) componentInstance = renderedComponent._instance || renderedComponent._currentElement;

                        if (renderedComponent._domID === component._domID) return componentInstance;

                        renderedComponent = renderedComponent._renderedComponent;
                    }
                }

                return null;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var isRootNode = el.hasAttribute && el.hasAttribute('data-reactroot');
                var componentName = window['%testCafeReactSelector%'];

                if (isRootNode) {
                    var rootComponent = utils.getRootComponent(el);

                    //NOTE: check if it's not a portal component
                    if (utils.getName(rootComponent) === componentName) return rootComponent._instance;

                    return getComponentInstance(rootComponent);
                }

                for (var _i26 = 0, _Object$keys26 = Object.keys(el), _length26 = _Object$keys26.length; _i26 < _length26; _i26++) {
                    var prop = _Object$keys26[_i26];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    return getComponentInstance(el[prop]);
                }
            }

            function getComponentKey(component) {
                var currentElement = component._reactInternalInstance ? component._reactInternalInstance._currentElement : component;

                return currentElement.key;
            }

            /*eslint-disable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-enable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: getComponentKey(componentInstance)
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: getComponentKey(componentInstance)
                };
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function scanDOMNodeForReactComponent(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;

                for (var _i28 = 0, _Object$keys28 = Object.keys(el), _length28 = _Object$keys28.length; _i28 < _length28; _i28++) {
                    var prop = _Object$keys28[_i28];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    component = el[prop];

                    break;
                }

                if (!component) return null;

                var parent = component._hostParent;

                if (!parent) return component;

                var renderedChildren = parent._renderedChildren;
                var renderedChildrenKeys = Object.keys(renderedChildren);

                var currentElementId = renderedChildrenKeys.filter(function (key) {
                    var renderedComponent = renderedChildren[key];

                    return renderedComponent && renderedComponent.getHostNode() === el;
                })[0];

                return renderedChildren[currentElementId];
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var react16Utils = /*global window Node*/
        function () {
            var ELEMENT_NODE = 1;
            var COMMENT_NODE = 8;

            function copyReactObject(obj) {
                var copiedObj = {};

                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop) && prop !== 'children') copiedObj[prop] = obj[prop];
                }

                return copiedObj;
            }

            function getComponentForDOMNode(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                var component = null;
                var emptyComponentFound = window['%testCafeReactEmptyComponent%'] && window['%testCafeReactEmptyComponent%'].length;

                if (emptyComponentFound && el.nodeType === COMMENT_NODE) component = window['%testCafeReactEmptyComponent%'].shift().__$$reactInstance;else if (window['%testCafeReactFoundComponents%'].length) component = window['%testCafeReactFoundComponents%'].filter(function (desc) {
                    return desc.node === el;
                })[0].component;

                var props = component.stateNode && component.stateNode.props || component.memoizedProps;
                var state = component.stateNode && component.stateNode.state || component.memoizedState;
                var key = component.key;

                return { props, state, key };
            }

            /*eslint-enable no-unused-vars*/
            function getReact(node, fn) {
                /*eslint-disable no-unused-vars*/
                var componentInstance = getComponentForDOMNode(node);

                if (!componentInstance) return null;

                delete window['%testCafeReactSelector%'];
                delete window['%testCafeReactEmptyComponent%'];
                delete window['%testCafeReactFoundComponents%'];

                if (typeof fn === 'function') {
                    return fn({
                        state: copyReactObject(componentInstance.state),
                        props: copyReactObject(componentInstance.props),
                        key: componentInstance.key
                    });
                }

                return {
                    state: copyReactObject(componentInstance.state),
                    props: copyReactObject(componentInstance.props),
                    key: componentInstance.key
                };
            }

            function scanDOMNodeForReactInstance(el) {
                if (!el || !(el.nodeType === ELEMENT_NODE || el.nodeType === COMMENT_NODE)) return null;

                if (el.nodeType === COMMENT_NODE) return el.__$$reactInstance.return.child;

                for (var _i30 = 0, _Object$keys30 = Object.keys(el), _length30 = _Object$keys30.length; _i30 < _length30; _i30++) {
                    var prop = _Object$keys30[_i30];
                    if (!/^__reactInternalInstance/.test(prop)) continue;

                    var nestedComponent = el[prop];

                    if (typeof nestedComponent.type !== 'string') return nestedComponent;

                    var parentComponent = nestedComponent;

                    do {
                        nestedComponent = parentComponent;
                        parentComponent = nestedComponent.return;
                    } while (parentComponent && parentComponent.type && !(parentComponent.stateNode instanceof Node));

                    return nestedComponent;
                }
            }

            function getRenderedComponentVersion(component, rootInstances) {
                if (!component.alternate) return component;

                var component1 = component;
                var component2 = component.alternate;

                while (component1.return) {
                    component1 = component1.return;
                }while (component2.return) {
                    component2 = component2.return;
                }if (rootInstances.indexOf(component1) > -1) return component;

                return component.alternate;
            }

            function scanDOMNodeForReactComponent(domNode) {
                var rootInstances = window['$testCafeReact16Roots'].map(function (rootEl) {
                    return rootEl.return || rootEl;
                });
                var reactInstance = scanDOMNodeForReactInstance(domNode);

                return getRenderedComponentVersion(reactInstance, rootInstances);
            }

            function getFoundComponentInstances() {
                return window['%testCafeReactFoundComponents%'].map(function (desc) {
                    return desc.component;
                });
            }

            function getComponentKey(instance) {
                return instance.key;
            }

            return { getReact, getComponentForDOMNode, scanDOMNodeForReactComponent, getFoundComponentInstances, getComponentKey };
        }();

        var componentInstances = null;
        var scanDOMNodeForReactComponent = reactVersion === 15 ? react15Utils.scanDOMNodeForReactComponent : react16Utils.scanDOMNodeForReactComponent;

        componentInstances = nodes.map(scanDOMNodeForReactComponent);

        var reactSelector = window['$testCafeReactSelector'];

        return reactSelector(selector, componentInstances);
    }
}, { returnDOMNodes: true }); /*global document window*/
var waitForReact = /*global ClientFunction document NodeFilter*/

/*eslint-disable no-unused-vars*/
exports.waitForReact = function waitForReact(timeout) {
    /*eslint-enable no-unused-vars*/
    var DEFAULT_TIMEOUT = 1e4;
    var checkTimeout = typeof timeout === 'number' ? timeout : DEFAULT_TIMEOUT;

    return (0, _testcafe.ClientFunction)(function () {
        var CHECK_INTERVAL = 200;
        var stopChecking = false;

        function findReact16Root() {
            var treeWalker = document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT, null, false);

            while (treeWalker.nextNode()) {
                if (treeWalker.currentNode.hasOwnProperty('_reactRootContainer')) return true;
            }return false;
        }

        function findReact15OrStaticRenderedRoot() {
            var rootEl = document.querySelector('[data-reactroot]');

            //NOTE: we have data-reactroot in static render even before hydration
            return rootEl && Object.keys(rootEl).some(function (prop) {
                return (/^__reactInternalInstance/.test(prop)
                );
            });
        }

        function findReactApp() {
            var isReact15OrStaticRender = findReact15OrStaticRenderedRoot();
            var isReact16WithHandlers = !!Object.keys(document).filter(function (prop) {
                return (/^_reactListenersID/.test(prop)
                );
            }).length;

            return isReact15OrStaticRender || isReact16WithHandlers || findReact16Root();
        }

        return new Promise(function (resolve, reject) {
            function tryFindReactApp() {
                var startTime = new Date();
                var reactTreeIsFound = findReactApp();
                var checkTime = new Date() - startTime;

                if (reactTreeIsFound) {
                    resolve();
                    return;
                }

                if (stopChecking) return;

                setTimeout(tryFindReactApp, checkTime > CHECK_INTERVAL ? checkTime : CHECK_INTERVAL);
            }

            tryFindReactApp();

            setTimeout(function () {
                stopChecking = true;

                reject('waitForReact: The waiting timeout is exceeded');
            }, checkTimeout);
        });
    }, { dependencies: { checkTimeout } })();
};